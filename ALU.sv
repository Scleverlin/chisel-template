// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ALU(	// src/main/scala/learning/first.scala:10:7
  input         clock,	// src/main/scala/learning/first.scala:10:7
                reset,	// src/main/scala/learning/first.scala:10:7
  input  [31:0] io_operand_a,	// src/main/scala/learning/first.scala:11:14
                io_operand_b,	// src/main/scala/learning/first.scala:11:14
  input         io_alu_op,	// src/main/scala/learning/first.scala:11:14
                io_valid,	// src/main/scala/learning/first.scala:11:14
  output [31:0] io_add_result,	// src/main/scala/learning/first.scala:11:14
  output [63:0] io_mul_result,	// src/main/scala/learning/first.scala:11:14
  output        io_add_result_valid,	// src/main/scala/learning/first.scala:11:14
                io_mul_result_valid	// src/main/scala/learning/first.scala:11:14
);

  reg  [31:0] mul_reg_a;	// src/main/scala/learning/first.scala:25:22
  reg  [31:0] mul_reg_b;	// src/main/scala/learning/first.scala:26:22
  reg         mul_valid_reg;	// src/main/scala/learning/first.scala:28:30
  wire        _GEN = io_valid & io_alu_op;	// src/main/scala/learning/first.scala:36:17
  wire        _GEN_0 = io_valid & ~io_alu_op;	// src/main/scala/learning/first.scala:44:{23,36}
  wire        _GEN_1 = _GEN | mul_valid_reg;	// src/main/scala/learning/first.scala:28:30, :34:17, :36:{17,40}, :40:29, :44:45
  always @(posedge clock) begin	// src/main/scala/learning/first.scala:10:7
    if (_GEN) begin	// src/main/scala/learning/first.scala:36:17
      mul_reg_a <= io_operand_a;	// src/main/scala/learning/first.scala:25:22
      mul_reg_b <= io_operand_b;	// src/main/scala/learning/first.scala:26:22
    end
    if (reset)	// src/main/scala/learning/first.scala:10:7
      mul_valid_reg <= 1'h0;	// src/main/scala/learning/first.scala:28:30
    else	// src/main/scala/learning/first.scala:10:7
      mul_valid_reg <= _GEN;	// src/main/scala/learning/first.scala:28:30, :36:17
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/learning/first.scala:10:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/learning/first.scala:10:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/learning/first.scala:10:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/learning/first.scala:10:7
      automatic logic [31:0] _RANDOM[0:4];	// src/main/scala/learning/first.scala:10:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/learning/first.scala:10:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/learning/first.scala:10:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/learning/first.scala:10:7
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/learning/first.scala:10:7
        end	// src/main/scala/learning/first.scala:10:7
        mul_reg_a = _RANDOM[3'h0];	// src/main/scala/learning/first.scala:10:7, :25:22
        mul_reg_b = _RANDOM[3'h1];	// src/main/scala/learning/first.scala:10:7, :26:22
        mul_valid_reg = _RANDOM[3'h4][0];	// src/main/scala/learning/first.scala:10:7, :28:30
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/learning/first.scala:10:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/learning/first.scala:10:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_add_result = _GEN_1 | ~_GEN_0 ? 32'h0 : io_operand_a + io_operand_b;	// src/main/scala/learning/first.scala:10:7, :34:17, :36:40, :40:29, :44:{23,45}, :45:35
  assign io_mul_result =
    _GEN | ~mul_valid_reg ? 64'h0 : {32'h0, mul_reg_a} * {32'h0, mul_reg_b};	// src/main/scala/learning/first.scala:10:7, :25:22, :26:22, :28:30, :34:17, :35:17, :36:{17,40}, :40:29, :42:32
  assign io_add_result_valid = ~_GEN_1 & _GEN_0;	// src/main/scala/learning/first.scala:10:7, :32:23, :34:17, :36:40, :40:29, :44:{23,45}
  assign io_mul_result_valid = ~_GEN & mul_valid_reg;	// src/main/scala/learning/first.scala:10:7, :28:30, :33:23, :36:{17,40}, :40:29
endmodule

